// Logic for making sure the same response is not reported multiple times.
//
// Responses are generated by several APIs and rather than filtering them in the UI
// or the backend we filter them here to make sure the same response is never reported
// multiple times.

import type { ChatResponse } from "../persistence/response";
import type { ChatResponseCallback } from "./SendChatMessage";

const gResponsesByTime = new Map<string, ChatResponse[]>();

export function addAppResponse(response: ChatResponse) {
  let existing = gResponsesByTime.get(response.time);
  if (existing && existing.some(r => JSON.stringify(r) == JSON.stringify(response))) {
    return false;
  }

  if (!existing) {
    existing = [];
    gResponsesByTime.set(response.time, existing);
  }
  existing.push(response);
  return true;
}

export function filterOnResponseCallback(onResponse: ChatResponseCallback) {
  return (response: ChatResponse) => {
    if (addAppResponse(response)) {
      onResponse(response);
    }
  };
}
